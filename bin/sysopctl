#!/bin/bash

# Define the current script's directory for sourcing dependencies
BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
MODULE_DIR="$BASE_DIR/../modules"

# Importing all required scripts for functionality
source "$MODULE_DIR/services.sh"
source "$MODULE_DIR/system_health.sh"
source "$MODULE_DIR/disk.sh"
source "$MODULE_DIR/process.sh"
source "$MODULE_DIR/logs.sh"
source "$MODULE_DIR/backup.sh"

APP_VERSION="v0.1.0"

# Function to display help information
display_help() {
    cat << HELP_TEXT
sysopctl - System Operations Controller ($APP_VERSION)

sysopctl is a command-line tool designed for system administrators to manage and monitor system resources efficiently. 
It provides commands for handling services, checking system health, managing disk usage, and performing backups.

Usage: sysopctl [command] [options]

Commands:

  service list                      Display currently running services and their statuses
  service start <name>              Initiate a specified service
  service stop <name>               Halt a specified service

  system load                       Show system load statistics over 1, 5, and 15 minutes

  disk usage                        Display disk usage details by partition

  process monitor                   Track system processes and resource usage in real time

  logs analyze                      Evaluate and filter recent system log entries for issues

  backup <path>                     Create a backup of system files from the specified path

  --help                            Display this help guide
  --version                         Display version details

Examples:

  sysopctl service list
  sysopctl service start apache2
  sysopctl system load
  sysopctl disk usage
  sysopctl process monitor
  sysopctl logs analyze
  sysopctl backup /home/user/documents

HELP_TEXT
}

# Function to show version details
display_version() {
    echo "sysopctl version $APP_VERSION"
}

# Main command dispatcher
case $1 in
    --help|-h)
        display_help
        ;;
    --version|-v)
        display_version
        ;;
    service)
        service "$2" "$3"  # Pass service command and name
        ;;
    system)
        if [[ $2 == "load" ]]; then
            system_load  # Display system load averages
        else
            echo "Unknown system command."
            display_help
        fi
        ;;
    disk)
        if [[ $2 == "usage" ]]; then
            check_disk_usage  # Show disk usage statistics
        else
            echo "Unknown disk command."
            display_help
        fi
        ;;
    process)
        if [[ $2 == "monitor" ]]; then
            process_monitor  # Monitor real-time processes
        else
            echo "Unknown process command."
            display_help
        fi
        ;;
    logs)
        if [[ $2 == "analyze" ]]; then
            analyze_logs  # Analyze recent log entries
        else
            echo "Unknown logs command."
            display_help
        fi
        ;;
    backup)
        backup_system "$2"  # Backup specified path
        ;;
    *)
        echo "Unrecognized command."
        display_help
        ;;
esac

